// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id             String       @id @default(cuid())
  email          String       @unique
  name           String
  passwordHash   String
  organizationId String
  role           UserRole     @default(VIEWER)
  isActive       Boolean      @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  chatSessions   ChatSession[]
  auditLogs      AuditLog[]

  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

// Organizations
model Organization {
  id               String         @id @default(cuid())
  name             String
  industry         Industry
  teamSize         TeamSize
  documentVolume   DocumentVolume
  stripeCustomerId String?        @unique
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  users            User[]
  deployments      Deployment[]
  documents        Document[]
  workflows        Workflow[]
  usageMetrics     UsageMetric[]
  billingRecords   BillingRecord[]
  chatSessions     ChatSession[]

  @@map("organizations")
}

enum Industry {
  LEGAL
  HEALTHCARE
  FINANCE
  PROFESSIONAL
}

enum TeamSize {
  SMALL     // 1-5
  MEDIUM    // 6-20
  LARGE     // 21-100
  ENTERPRISE // 100+
}

enum DocumentVolume {
  LOW       // 1-100
  MEDIUM    // 101-1000
  HIGH      // 1001-10000
  ENTERPRISE // 10000+
}

// AI Models
model AIModel {
  id              String    @id @default(cuid())
  name            String    @unique
  type            ModelType
  parameters      String
  vramRequirement Int       // in GB
  tokensPerDay    Int
  monthlyPrice    Int       // in cents
  description     String
  specifications  String
  isRecommended   Boolean   @default(false)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  deployments     Deployment[]

  @@map("ai_models")
}

enum ModelType {
  LIGHTWEIGHT
  RECOMMENDED
  ENTERPRISE
}

// Deployments
model Deployment {
  id                   String            @id @default(cuid())
  organizationId       String
  name                 String
  industry             Industry
  useCase              String
  modelId              String
  region               Region
  compliance           ComplianceType
  status               DeploymentStatus  @default(PENDING)
  infrastructureConfig Json              // InfrastructureConfig
  endpoints            Json?             // DeploymentEndpoints
  costEstimate         Int               // in cents per month
  actualCost           Int               @default(0) // in cents
  errorMessage         String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  organization         Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  model                AIModel           @relation(fields: [modelId], references: [id])
  documents            Document[]
  workflows            Workflow[]
  chatSessions         ChatSession[]
  usageMetrics         UsageMetric[]
  deploymentLogs       DeploymentLog[]

  @@map("deployments")
}

enum Region {
  US_EAST
  US_WEST
  EU_CENTRAL
}

enum ComplianceType {
  SOC2
  HIPAA
  LEGAL
  GDPR
}

enum DeploymentStatus {
  PENDING
  PROVISIONING
  DEPLOYING
  RUNNING
  STOPPING
  STOPPED
  FAILED
}

model DeploymentLog {
  id           String     @id @default(cuid())
  deploymentId String
  step         Int
  totalSteps   Int
  currentTask  String
  progress     Int        // 0-100
  logs         String[]
  status       String
  createdAt    DateTime   @default(now())

  deployment   Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)

  @@map("deployment_logs")
}

// Documents
model Document {
  id             String           @id @default(cuid())
  organizationId String
  deploymentId   String
  filename       String
  originalName   String
  mimeType       String
  size           Int              // in bytes
  s3Key          String           @unique
  status         DocumentStatus   @default(UPLOADED)
  extractedText  String?
  summary        String?
  metadata       Json             // DocumentMetadata
  embeddings     Float[]?         // Vector embeddings
  processingError String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deployment     Deployment       @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  messageSources DocumentSource[]

  @@map("documents")
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  FAILED
}

// Chat and Conversations
model ChatSession {
  id             String       @id @default(cuid())
  organizationId String
  deploymentId   String
  userId         String
  title          String
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deployment     Deployment   @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])
  messages       ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id         String           @id @default(cuid())
  sessionId  String
  content    String
  role       MessageRole
  metadata   Json?            // MessageMetadata
  createdAt  DateTime         @default(now())

  session    ChatSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sources    DocumentSource[]

  @@map("chat_messages")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

model DocumentSource {
  id             String      @id @default(cuid())
  messageId      String
  documentId     String
  pageNumber     Int?
  snippet        String
  relevanceScore Float

  message        ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  document       Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_sources")
}

// Workflows
model Workflow {
  id              String           @id @default(cuid())
  organizationId  String
  deploymentId    String
  name            String
  description     String
  template        WorkflowTemplate
  n8nWorkflowId   String           @unique
  isActive        Boolean          @default(true)
  configuration   Json             // WorkflowConfig
  lastRunAt       DateTime?
  nextRunAt       DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deployment      Deployment       @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  workflowRuns    WorkflowRun[]

  @@map("workflows")
}

enum WorkflowTemplate {
  DOCUMENT_AUTO_PROCESSING
  DAILY_DIGEST
  QUESTION_ROUTING
  COMPLIANCE_MONITORING
}

model WorkflowRun {
  id           String        @id @default(cuid())
  workflowId   String
  status       WorkflowRunStatus
  startedAt    DateTime      @default(now())
  completedAt  DateTime?
  errorMessage String?
  logs         Json?         // Array of log entries
  metadata     Json?         // Run-specific metadata

  workflow     Workflow      @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_runs")
}

enum WorkflowRunStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

// Usage Metrics and Billing
model UsageMetric {
  id             String      @id @default(cuid())
  organizationId String
  deploymentId   String
  metricType     MetricType
  value          Float
  unit           String
  timestamp      DateTime    @default(now())
  metadata       Json?       // Additional metric data

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  deployment     Deployment   @relation(fields: [deploymentId], references: [id], onDelete: Cascade)

  @@map("usage_metrics")
}

enum MetricType {
  API_REQUESTS
  DOCUMENTS_PROCESSED
  TOKENS_USED
  STORAGE_USED
  COMPUTE_HOURS
  BANDWIDTH_USED
}

model BillingRecord {
  id               String        @id @default(cuid())
  organizationId   String
  period           String        // YYYY-MM format
  hostingCost      Int           // in cents
  platformFee      Int           // in cents (7% of hosting cost)
  totalCost        Int           // in cents
  stripeInvoiceId  String?       @unique
  status           BillingStatus @default(PENDING)
  dueDate          DateTime
  paidAt           DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, period])
  @@map("billing_records")
}

enum BillingStatus {
  PENDING
  PAID
  OVERDUE
  FAILED
}

// Audit Logs
model AuditLog {
  id           String   @id @default(cuid())
  userId       String
  action       String
  resourceType String
  resourceId   String?
  details      Json?    // Additional context about the action
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// System Health
model SystemHealth {
  id            String   @id @default(cuid())
  deploymentId  String?  // null for global system metrics
  metricName    String
  value         Float
  status        String   // healthy, warning, critical
  timestamp     DateTime @default(now())
  metadata      Json?

  @@map("system_health")
}